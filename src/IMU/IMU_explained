# MPU6050 IMU Implementation - Step by Step Explanation

## Overview
This IMU implementation provides gravity-compensated acceleration and drift-corrected gyroscope data for SLAM applications. The goal is to output:
- **Acceleration**: Only motion-caused acceleration (gravity removed)
- **Gyroscope**: Drift-free angular velocity readings
- **Temperature**: For monitoring thermal effects

## Class Structure

### Private Variables
- **Hardware**: I2C file descriptor, device address, initialization flag
- **Static calibration**: Fixed offsets calculated once during calibration
- **Dynamic correction**: Continuously updated bias estimates for gyroscope
- **Legacy variables**: Unused variables from previous implementations

## Step 1: Initialization

### Hardware Setup
1. **Open I2C device**: Connect to `/dev/i2c-1` (Raspberry Pi's I2C bus)
2. **Set slave address**: Configure I2C to communicate with MPU6050 (0x68)
3. **Wake up sensor**: Exit sleep mode by writing to power management register

### Sensor Configuration
4. **Set sample rate**: 125Hz for good performance vs. power balance
5. **Configure ranges**: ±2g accelerometer, ±250°/s gyroscope for high precision
6. **Set filter**: 44Hz low-pass filter to reduce noise

## Step 2: Calibration

### Purpose
Remove static sensor bias by measuring "zero" readings when device is still.

### Process
1. **Collect samples**: Take many readings while device is stationary
2. **Calculate averages**: Find mean offset for each axis
3. **Store offsets**: Save for future correction

**Formula**: `calibrated_reading = raw_reading - offset`

## Step 3: Data Reading (Core Function)

### 3.1: Raw Data Acquisition
- Read 14 bytes from sensor in one I2C transaction
- Combine high and low bytes to form 16-bit values
- Convert from raw counts to physical units (m/s², rad/s, °C)

### 3.2: Dynamic Gyroscope Bias Correction

**Problem**: Gyroscope bias changes with temperature and position.

**Solution**: Continuously update bias estimates when device is still.

**Process**:
1. **Detect stillness**: Check if acceleration ≈ gravity AND rotation ≈ 0
2. **Count still periods**: Must be still for >50ms before updating
3. **Update bias slowly**: Very conservative 0.1% update rate
4. **Apply correction**: Subtract current bias from readings

**Why this works**: When still, gyroscope should read 0°/s. Any non-zero reading is bias.

### 3.3: Gravity Compensation (High-Pass Filter)

**Problem**: Accelerometer measures gravity + motion. We only want motion.

**Solution**: High-pass filter removes DC component (gravity), keeps AC component (motion).

**How it works**:
- **DC component (gravity)**: Constant → filtered out
- **AC component (motion)**: Rapidly changing → passes through
- **Result**: Zero acceleration when still, motion-only when moving

## Step 4: Output

Clean data ready for SLAM:
- **Acceleration**: Motion-only (gravity removed)
- **Gyroscope**: Drift-corrected angular velocity
- **Temperature**: Sensor temperature
- **Timestamp**: Microsecond precision timing

## Key Benefits for SLAM

1. **Zero when still**: Perfect motion detection
2. **Gravity-free**: Ready for integration to velocity/position
3. **Drift-corrected**: Accurate orientation tracking
4. **High precision**: Maximum resolution settings
5. **Real-time**: Continuous adaptive correction

## Signal Flow Summary

```
Raw Sensor → Unit Conversion → Static Calibration → Dynamic Correction → Clean Output
```
